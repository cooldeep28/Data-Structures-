//Initial Template for C++


#include <bits/stdc++.h>
using namespace std;

 // } Driver Code Ends


//User function Template for C++

class Solution
{
  public:
    vector<int> kTop(int a[], int n, int k) 
    {
        vector<int> top(k + 1); 
        vector<int> ans; 
        unordered_map<int, int> freq; 

        for (int m = 0; m < n; m++) { 
            // increase the frequency 
            freq[a[m]]++; 
      
            // store that element in top vector 
            top[k] = a[m]; 
      
            // search in top vector for same element 
            auto it = find(top.begin(), top.end() - 1, a[m]); 
      
            // iterate from the position of element to zero 
            for (int i = distance(top.begin(), it) - 1; i >= 0; --i) { 
                // compare the frequency and swap if higher 
                // frequency element is stored next to it 
                if (freq[top[i]] < freq[top[i + 1]]) 
                    swap(top[i], top[i + 1]); 
      
                // if frequency is same compare the elements 
                // and swap if next element is high 
                else if ((freq[top[i]] == freq[top[i + 1]]) 
                         && (top[i] > top[i + 1])) 
                    swap(top[i], top[i + 1]); 
                else
                    break; 
            } 
      
            // print top k elements 
            for (int i = 0; i < k && top[i] != 0; ++i) 
                ans.push_back(top[i]);
                //cout << top[i] << ' '; 
        } 
        return ans;
    }    
};

// { Driver Code Starts.

int main() {
	long long t;
	
	cin >> t;
	
	while(t--){
	    long long n;
	    long long k;
	    cin >> n;
	    cin >> k;
	    int a[n];
	    for(long long i = 0;i<n;i++){
	        cin >> a[i];
	    }
	        Solution ob;
	        vector<int> ans;
	        ans=ob.kTop(a,n,k);
	        for(int i=0;i<ans.size();i++)
	        {
	        cout<<ans[i];
	        cout<<" ";
	        }
	        cout<<'\n';
	    }
	return 0;
}
  // } Driver Code Ends
