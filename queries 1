
#include<bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
class Solution {
public:
	using ll = long long int ;
	ll add(ll x, ll y){
		ll mod = 1e9 + 7;
		return ((x%mod) + (y%mod))%mod;
	}
	ll sub(ll x, ll y){
		ll mod = 1e9 + 7;
		return ((x%mod) - (y%mod) + mod)%mod;
	}
	ll mul(ll x, ll y){
		ll mod = 1e9 + 7;
		return ((x%mod) * (y%mod))%mod;
	}
	vector<int>FindQuery(vector<int>nums, vector<vector<int>>Query){
		int n = nums.size();
		ll mod = 1e9 + 7;
		vector<ll>dp1(n+1,0), dp2(n+1, 0), dp3(n+1, 0);
		for(int i = 0; i < n; i++){
			dp1[i+1] = dp1[i] + nums[i];
			dp1[i+1] %= mod; 
		}
		for(ll i = 0; i < n; i++){
			dp2[i+1] = add(dp2[i] , mul(nums[i] , (i + 1)));
			dp2[i+1] %= mod;
		}
		for(int i = 0; i  < n; i++){
			dp3[i+1] = add(dp3[i] , mul(mul(nums[i] , (i + 1)) , (i + 1)));
			dp3[i+1] %= mod;
		}
		vector<int>query_result;
		for(auto i: Query){
			int l = i[0];
			int r = i[1];
			ll ans = sub(dp3[r] , dp3[l-1]);
			ans = add(ans,mul(mul((l-1) , (l-1)) , ((dp1[r] - dp1[l-1]))));
			ans %= mod;
			ans  = sub(ans, mul(2*(l-1), sub(dp2[r], dp2[l-1])));
			// ans -= (((2* (l-1))%mod) * ((dp2[r] - dp2[l-1]))%mod);
			ans += mod;
			ans %= mod;
			query_result.push_back(int(ans));
		}
		return query_result;
	}

};
// { Driver Code Starts.
int main(){
	int tc;
	cin >> tc;
	while(tc--){
		int n, q;
		cin >> n;
		vector<int>nums(n);
		for(int i = 0; i < n; i++)
			cin >> nums[i];
		cin >> q;
		vector<vector<int>>Query;
		for(int i = 0; i < q; i++){
			int l, r;
			cin >> l >> r;
			Query.push_back({l, r});
		}
		Solution obj;
		vector<int>ans = obj.FindQuery(nums, Query);
		for(auto i: ans)
			cout << i << "\n";
	}
	return 0;
}  // } Driver Code Ends
