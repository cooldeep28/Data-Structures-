// Initial Template for C++

#include <bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
// User function Template for C++

class Solution{
public:
    void build(int v, int l, int r, int a[], int t[])
    {
        if(l == r)
            t[v] = a[l];
        else{
            int mid = (l + r)/2;
            build(2*v, l, mid, a, t);
            build(2*v+1, mid+1, r, a, t);
            t[v] = t[2*v] ^ t[2*v+1];
        }
    }
    
    int get(int v, int tl, int tr, int l, int r, int t[]){
        if(l > r)
            return 0;
        if(tl == l && tr == r)
            return t[v];
        int mid = (tl + tr)/2;
        return get(2*v, tl, mid, l, min(mid, r), t) ^
                get(2*v+1, mid+1, tr, max(mid+1, l), r, t);
    }
    
    vector<int> specialXor(int N, int Q, int a[], vector<int> query[])
    {
        int val = 0;
        int t[4*N+2];
        for(int i = 0;i < N;i++)
            val = val ^ a[i];
        build(1, 0, N-1, a, t);
        int l, r, v;
        vector<int> sol;
        for(int i = 0;i < Q;i++){
            l = query[i][0];
            r = query[i][1];
            v = get(1, 0, N-1, l-1, r-1, t) ^ val;
            sol.push_back(v);
        }
        return sol;
    }
};


// { Driver Code Starts.

int main(){
    int t;
    cin>>t;
    while(t--){
        int N, Q;
        cin>>N>>Q;
        int a[N];
        for(int i = 0;i < N;i++)
            cin>>a[i];
        int l, r;
        vector<int> query[Q];
        for(int i = 0;i < Q;i++){
            cin>>l>>r;
            query[i].push_back(l);
            query[i].push_back(r);
        }
        
        Solution ob;
        vector<int> ans = ob.specialXor(N, Q, a, query);
        for(int u: ans)
            cout<<u<<"\n";
    }
    return 0;
}  // } Driver Code Ends
